import os
import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv

# Load API key from secrets in Streamlit
import streamlit as st
api_key = st.secrets["GEMINI_API_KEY"]

#for local 
# load_dotenv()  # Uncomment if using local .env file
# api_key = os.getenv("GEMINI_API_KEY")  # Uncomment if using local


# Configure Gemini AI
if api_key:
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel('gemini-2.0-flash-exp')
else:
    print("WARNING: No Gemini API key found in .env file")
    model = None

def generate_mcqs_from_text(text, max_questions=5):
    """Generate MCQs using Gemini 2.5 based on input text content"""
    
    if not model:
        return "‚ùå Error: Gemini API key not configured. Please add GEMINI_API_KEY to your .env file."
    
    prompt = f"""
‡§§‡§™‡§æ‡§à‡§Ç ‡§è‡§ï ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ‡§µ‡§ø‡§¶‡•ç ‡§π‡•Å‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ ‡§ú‡§∏‡§ï‡•ã ‡§ï‡§æ‡§Æ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ‡§§‡•ç‡§Æ‡§ï ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§§‡§•‡•ç‡§Ø‡§Æ‡§æ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§¨‡§π‡•Å‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§π‡§∞‡•Ç (MCQs) ‡§§‡§Ø‡§æ‡§∞ ‡§ó‡§∞‡•ç‡§®‡•Å ‡§π‡•ã‡•§

‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡§≤‡§ï‡•ã ‡§Ö‡§®‡•Å‡§ö‡•ç‡§õ‡•á‡§¶‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ {max_questions} ‡§µ‡§ü‡§æ MCQs ‡§®‡•á‡§™‡§æ‡§≤‡•Ä ‡§≠‡§æ‡§∑‡§æ‡§Æ‡§æ ‡§§‡§Ø‡§æ‡§∞ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§ ‡§®‡§ø‡§Æ‡•ç‡§® ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§®‡§π‡§∞‡•Ç ‡§™‡§æ‡§≤‡§®‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç:

üîπ ‡§Ö‡§®‡•Å‡§ö‡•ç‡§õ‡•á‡§¶‡§Æ‡§æ ‡§â‡§≤‡•ç‡§≤‡•á‡§ñ‡§ø‡§§ ‡§§‡§•‡•ç‡§Ø‡§π‡§∞‡•Ç‡§Æ‡§æ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§π‡§∞‡•Ç ‡§Æ‡§æ‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§
üîπ ‡§π‡§∞‡•á‡§ï ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§Æ‡§æ ‡§ö‡§æ‡§∞ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡§π‡§∞‡•Ç (‡§ï, ‡§ñ, ‡§ó, ‡§ò) ‡§∞‡§æ‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§
üîπ ‡§è‡§ï ‡§Æ‡§æ‡§§‡•ç‡§∞ ‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞ ‡§π‡•Å‡§®‡•Å ‡§™‡§∞‡•ç‡§®‡•á‡§õ‡•§
üîπ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡§π‡§∞‡•Ç ‡§Ø‡§•‡§æ‡§∏‡§Æ‡•ç‡§≠‡§µ ‡§Ö‡§∞‡•ç‡§•‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∞ ‡§≠‡•ç‡§∞‡§æ‡§Æ‡§ï ‡§®‡§π‡•Å‡§®‡•á ‡§¨‡§®‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§
üîπ ‡§ï‡•Å‡§®‡•à ‡§™‡§®‡§ø ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§®‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§
üîπ ‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™‡§Æ‡§æ ‡§â‡§≤‡•ç‡§≤‡•á‡§ñ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç: "‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞: ‡§ñ" ‡§ú‡§∏‡•ç‡§§‡•à‡•§
üîπ ‡§Ö‡§®‡•Å‡§ö‡•ç‡§õ‡•á‡§¶‡§Æ‡§æ ‡§®‡§≠‡§è‡§ï‡§æ ‡§ï‡•Å‡§∞‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§¨‡§æ‡§∞‡•á‡§Æ‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§®‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§

‡§Ö‡§®‡•Å‡§ö‡•ç‡§õ‡•á‡§¶:
{text}

‡§Ü‡§â‡§ü‡§™‡•Å‡§ü‡§ï‡•ã ‡§¢‡§æ‡§Å‡§ö‡§æ:
‡•ß. ‡§™‡•ç‡§∞‡§∂‡•ç‡§®?
‡§ï) ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ A
‡§ñ) ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ B
‡§ó) ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ C
‡§ò) ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ D
‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞: ‡§ñ

‡•®. ‡§™‡•ç‡§∞‡§∂‡•ç‡§®?
‡§ï) ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ A
‡§ñ) ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ B
‡§ó) ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ C
‡§ò) ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ D
‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞: ‡§ó

‡§ï‡•á‡§µ‡§≤ MCQs ‡§´‡§ø‡§∞‡•ç‡§§‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç, ‡§Ö‡§®‡•ç‡§Ø ‡§ï‡•Å‡§®‡•à ‡§™‡§æ‡§† ‡§®‡§¶‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§
"""

    try:
        print(f"DEBUG: Generating MCQs using Gemini for text: {text[:100]}...")
        
        response = model.generate_content(prompt)
        result = response.text.strip()
        
        print("DEBUG: Successfully generated MCQ content from Gemini:")
        print(result[:200] + "..." if len(result) > 200 else result)
        print("=" * 50)
        
        return result
        
    except Exception as e:
        error_msg = f"‚ùå Error generating MCQs: {str(e)}"
        print(f"DEBUG: Gemini API Error: {error_msg}")
        return error_msg


